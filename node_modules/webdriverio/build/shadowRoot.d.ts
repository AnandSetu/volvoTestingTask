import type { local } from 'webdriver';
export declare function getShadowRootManager(browser: WebdriverIO.Browser): ShadowRootManager;
/**
 * This class is responsible for managing shadow roots and their elements.
 * It allows to do deep element lookups and pierce into shadow DOMs across
 * all components of a page.
 */
export declare class ShadowRootManager {
    #private;
    constructor(browser: WebdriverIO.Browser);
    initialize(): Promise<boolean>;
    /**
     * reset list of shadow roots for a specific browsing context
     */
    handleBrowsingContextLoad(response: local.BrowsingContextNavigationInfo): void;
    /**
     * capture shadow root elements propagated through console.debug
     */
    handleLogEntry(log: local.LogEntry): void | "";
    /**
     * get shadow roots for a specific context
     * @param context context to get shadow roots for (default: current browsing context)
     * @returns list of shadow root ids for given context
     */
    getShadowRootsForContext(context?: string): string[];
    deleteShadowRoot(id: string, context?: string): void;
    /**
     * Get the custom element based on the shadow root id
     * @param id element reference of a Shadow DOM element
     * @returns the element that caries the Shadow DOM
     */
    getElementWithShadowDOM(id: string): string | undefined;
}
//# sourceMappingURL=shadowRoot.d.ts.map